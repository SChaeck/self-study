{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7082,"databundleVersionId":874852,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 필사 24. 6. 23.\n### Competitions: Porto Seguro’s Safe Driver Prediction\nReference: 안전 운전자 예측 경진대회 성능 개선 II / XGB Modeling (https://www.kaggle.com/code/jinkwonskk/ii-xgb-modeling)","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ntrain = pd.read_csv('/kaggle/input/porto-seguro-safe-driver-prediction/train.csv', index_col='id')\ntest = pd.read_csv('/kaggle/input/porto-seguro-safe-driver-prediction/test.csv', index_col='id')\nsubmission = pd.read_csv('/kaggle/input/porto-seguro-safe-driver-prediction/sample_submission.csv', index_col='id')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-23T03:34:50.039941Z","iopub.execute_input":"2024-06-23T03:34:50.040322Z","iopub.status.idle":"2024-06-23T03:34:59.650961Z","shell.execute_reply.started":"2024-06-23T03:34:50.040292Z","shell.execute_reply":"2024-06-23T03:34:59.649765Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# 피처 엔지니어링","metadata":{}},{"cell_type":"code","source":"### 데이터 합치기\nall_data = pd.concat([train, test], ignore_index=True)\nall_data = all_data.drop('target', axis=1) # 타깃값 제거\n\nall_features = all_data.columns # 전체 피처들 저장","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:34:59.653297Z","iopub.execute_input":"2024-06-23T03:34:59.653764Z","iopub.status.idle":"2024-06-23T03:35:00.123660Z","shell.execute_reply.started":"2024-06-23T03:34:59.653723Z","shell.execute_reply":"2024-06-23T03:35:00.122342Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"### 명목형 특징들을 원-핫 인코딩으로 변경\nfrom sklearn.preprocessing import OneHotEncoder\n\n# 명목형 피처\ncat_features = [feature for feature in all_features if 'cat' in feature]\n\n# 원-핫 인코딩 적용\nonehot_encoder = OneHotEncoder()\nencoded_cat_matrix = onehot_encoder.fit_transform(all_data[cat_features])","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:00.125235Z","iopub.execute_input":"2024-06-23T03:35:00.125642Z","iopub.status.idle":"2024-06-23T03:35:02.892888Z","shell.execute_reply.started":"2024-06-23T03:35:00.125611Z","shell.execute_reply":"2024-06-23T03:35:02.891542Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"### 파생 피처 추가\n# '데이터 하나당 결측값 개수'를 파생 피처로 추가\nall_data['num_missing'] = (all_data==-1).sum(axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:02.896577Z","iopub.execute_input":"2024-06-23T03:35:02.896966Z","iopub.status.idle":"2024-06-23T03:35:03.468303Z","shell.execute_reply.started":"2024-06-23T03:35:02.896934Z","shell.execute_reply":"2024-06-23T03:35:03.467325Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# 명목형 피처, calc 분류 피처를 제외한 피처\nremaining_features = [feature for feature in all_features if ('cat' not in feature and 'calc' not in feature)]\n# num_missing을 remaining_features에 추가\nremaining_features.append('num_missing')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:03.469748Z","iopub.execute_input":"2024-06-23T03:35:03.470217Z","iopub.status.idle":"2024-06-23T03:35:03.477007Z","shell.execute_reply.started":"2024-06-23T03:35:03.470178Z","shell.execute_reply":"2024-06-23T03:35:03.475517Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# 분류가 ind인 피처\nind_features = [feature for feature in all_features if 'ind' in feature]\n\nis_first_feature = True\nfor ind_feature in ind_features:\n    if is_first_feature:\n        all_data['mix_ind'] = all_data[ind_feature].astype(str) + '_'\n        is_first_feature = False\n    else:\n        all_data['mix_ind'] += all_data[ind_feature].astype(str) + '_'","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:03.478717Z","iopub.execute_input":"2024-06-23T03:35:03.479237Z","iopub.status.idle":"2024-06-23T03:35:25.900598Z","shell.execute_reply.started":"2024-06-23T03:35:03.479193Z","shell.execute_reply":"2024-06-23T03:35:25.898917Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"all_data['mix_ind']","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:25.902085Z","iopub.execute_input":"2024-06-23T03:35:25.902484Z","iopub.status.idle":"2024-06-23T03:35:25.913576Z","shell.execute_reply.started":"2024-06-23T03:35:25.902435Z","shell.execute_reply":"2024-06-23T03:35:25.912255Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"0          2_2_5_1_0_0_1_0_0_0_0_0_0_0_11_0_1_0_\n1           1_1_7_0_0_0_0_1_0_0_0_0_0_0_3_0_0_1_\n2          5_4_9_1_0_0_0_1_0_0_0_0_0_0_12_1_0_0_\n3           0_1_2_0_0_1_0_0_0_0_0_0_0_0_8_1_0_0_\n4           0_2_0_1_0_1_0_0_0_0_0_0_0_0_9_1_0_0_\n                           ...                  \n1488023     0_1_6_0_0_0_1_0_0_0_0_0_0_0_2_0_0_1_\n1488024    5_3_5_1_0_0_0_1_0_0_0_0_0_0_11_1_0_0_\n1488025     0_1_5_0_0_1_0_0_0_0_0_0_0_0_5_0_0_1_\n1488026    6_1_5_1_0_0_0_0_1_0_0_0_0_0_13_1_0_0_\n1488027    7_1_4_1_0_0_0_0_1_0_0_0_0_0_12_1_0_0_\nName: mix_ind, Length: 1488028, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"cat_count_features = []\nfor feature in cat_features+['mix_ind']:\n    val_counts_dict = all_data[feature].value_counts().to_dict()\n    all_data[f'{feature}_count'] = all_data[feature].apply(lambda x: val_counts_dict[x])\n    cat_count_features.append(f'{feature}_count')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:25.915388Z","iopub.execute_input":"2024-06-23T03:35:25.915866Z","iopub.status.idle":"2024-06-23T03:35:44.534320Z","shell.execute_reply.started":"2024-06-23T03:35:25.915832Z","shell.execute_reply":"2024-06-23T03:35:44.532722Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"cat_count_features","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:44.536002Z","iopub.execute_input":"2024-06-23T03:35:44.536376Z","iopub.status.idle":"2024-06-23T03:35:44.544550Z","shell.execute_reply.started":"2024-06-23T03:35:44.536345Z","shell.execute_reply":"2024-06-23T03:35:44.543322Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"['ps_ind_02_cat_count',\n 'ps_ind_04_cat_count',\n 'ps_ind_05_cat_count',\n 'ps_car_01_cat_count',\n 'ps_car_02_cat_count',\n 'ps_car_03_cat_count',\n 'ps_car_04_cat_count',\n 'ps_car_05_cat_count',\n 'ps_car_06_cat_count',\n 'ps_car_07_cat_count',\n 'ps_car_08_cat_count',\n 'ps_car_09_cat_count',\n 'ps_car_10_cat_count',\n 'ps_car_11_cat_count',\n 'mix_ind_count']"},"metadata":{}}]},{"cell_type":"code","source":"### 필요 없는 피처 제거\nfrom scipy import sparse\n\n# 필요 없는 피처들\ndrop_features = ['ps_ind_14', 'ps_ind_10_bin', 'ps_ind_11_bin', 'ps_ind_12_bin', 'ps_ind_13_bin', 'ps_car_14']\n\n# remaining_features, cat_count_features에서 drop_features를 제거한 데이터\nall_data_remaining = all_data[remaining_features+cat_count_features].drop(drop_features, axis=1)\n\n# 데이터 합치기\nall_data_sprs = sparse.hstack([sparse.csr_matrix(all_data_remaining), encoded_cat_matrix], format='csr')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:44.549029Z","iopub.execute_input":"2024-06-23T03:35:44.549417Z","iopub.status.idle":"2024-06-23T03:35:48.597153Z","shell.execute_reply.started":"2024-06-23T03:35:44.549385Z","shell.execute_reply":"2024-06-23T03:35:48.595717Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"### 데이터 나누기\nnum_train = len(train) # 훈련 데이터 개수\n\n# 훈련 데이터와 테스트 데이터 나누기\nX = all_data_sprs[:num_train]\nX_test = all_data_sprs[num_train:]\n\ny = train['target'].values","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:48.598446Z","iopub.execute_input":"2024-06-23T03:35:48.598848Z","iopub.status.idle":"2024-06-23T03:35:49.771407Z","shell.execute_reply.started":"2024-06-23T03:35:48.598817Z","shell.execute_reply":"2024-06-23T03:35:49.769879Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"### 정규화 지니계수 계산 함수\nimport numpy as np\n\ndef eval_gini(y_true, y_pred):\n    # 실제값과 예측값의 크기가 같은지 확인 (값이 다르면 오류 발생)\n    assert y_true.shape == y_pred.shape\n    \n    n_samples = y_true.shape[0] # 데이터 개수\n    L_mid = np.linspace(1 / n_samples, 1, n_samples) # 대각선 값\n    \n    # 1) 예측값에 대한 지니계수\n    pred_order = y_true[y_pred.argsort()] # y_pred 순으로 y_true 값 정렬\n    L_pred = np.cumsum(pred_order) / np.sum(pred_order) # 로렌츠 곡선\n    G_pred = np.sum(L_mid - L_pred) # 예측 값에 대한 지니 계수\n    \n    # 2) 예측이 완벽할 때 지니계수\n    true_order = y_true[y_true.argsort()] # y_ture 크기 순으로 y_true 값 정렬\n    L_true = np.cumsum(true_order) / np.sum(true_order) # 로렌츠 곡선\n    G_true = np.sum(L_mid - L_true) # 예측이 완벽할 때 지니계수\n    \n    # 정규화된 지니계수\n    return G_pred / G_true","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:49.772913Z","iopub.execute_input":"2024-06-23T03:35:49.773278Z","iopub.status.idle":"2024-06-23T03:35:49.782735Z","shell.execute_reply.started":"2024-06-23T03:35:49.773247Z","shell.execute_reply":"2024-06-23T03:35:49.781144Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# XGBoost용 gini() 함수\ndef gini(preds, dtrain):\n    labels = dtrain.get_label()\n    return 'gini', eval_gini(labels, preds)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:49.784379Z","iopub.execute_input":"2024-06-23T03:35:49.784837Z","iopub.status.idle":"2024-06-23T03:35:49.797732Z","shell.execute_reply.started":"2024-06-23T03:35:49.784797Z","shell.execute_reply":"2024-06-23T03:35:49.796315Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"### 하이퍼파라미터 최적화\n# 데이터셋 준비\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\n# 8:2 비율로 훈련 데이터, 검증 데이터 분리 (베이지안 최적화 수행용)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# 베이지안 최적화용 데이터셋\nbayes_dtrain = xgb.DMatrix(X_train, y_train)\nbayes_dvalid = xgb.DMatrix(X_valid, y_valid)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:49.799612Z","iopub.execute_input":"2024-06-23T03:35:49.800053Z","iopub.status.idle":"2024-06-23T03:35:50.847407Z","shell.execute_reply.started":"2024-06-23T03:35:49.800017Z","shell.execute_reply":"2024-06-23T03:35:50.846413Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"### 하이퍼파라미터 범위 설정\n# 베이지안 최적화를 위한 하이퍼 파라미터 범위\nparam_bounds = {\n    'max_depth': (4, 8),\n    'subsample': (0.6, 0.9),\n    'colsample_bytree': (0.7, 1.0),\n    'min_child_weight': (5, 7),\n    'gamma': (8, 11),\n    'reg_alpha': (7, 9),\n    'reg_lambda': (1.1, 1.5),\n    'scale_pos_weight': (1.4, 1.6)\n}\n\n# 값이 고정된 하이퍼파라미터\nfixed_params = {\n    'objective': 'binary:logistic',\n    'learning_rate': 0.02,\n    'random_state': 1991\n}","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:35:50.852110Z","iopub.execute_input":"2024-06-23T03:35:50.855323Z","iopub.status.idle":"2024-06-23T03:35:50.864208Z","shell.execute_reply.started":"2024-06-23T03:35:50.855275Z","shell.execute_reply":"2024-06-23T03:35:50.863075Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"### (베이지안 최적화용) 평가지표 계산 함수 작성\ndef eval_function(max_depth, subsample, colsample_bytree, min_child_weight, reg_alpha, gamma, reg_lambda, scale_pos_weight):\n    '''최적화하려는 평가지표(지니계수) 계산 함수'''\n    # 베이지안 최적화를 수행할 하이퍼파라미터\n    params = {\n        'max_depth': int(round(max_depth)),\n        'subsample': subsample,\n        'colsample_bytree': colsample_bytree,\n        'min_child_weight': min_child_weight,\n        'gamma': gamma,\n        'reg_alpha': reg_alpha,\n        'reg_lambda': reg_lambda,\n        'scale_pos_weight': scale_pos_weight\n    }\n    # 값이 고정된 하이퍼파라미터도 추가\n    params.update(fixed_params)\n    \n    print('하이퍼파라미터 :', params)\n    \n    # XGBoost 모델 훈련\n    xgb_model = xgb.train(\n        params=params,\n        dtrain=bayes_dtrain,\n        num_boost_round=2000,\n        evals=[(bayes_dvalid, 'bayes_dvalid')],\n        maximize=True,\n        feval=gini,\n        early_stopping_rounds=200,\n        verbose_eval=False\n    )\n    \n\n    best_iter = xgb_model.best_iteration # 최적 반복 횟수\n    # 검증 데이터로 예측 수행\n    preds = xgb_model.predict(bayes_dvalid, iteration_range=(0, best_iter))\n    # 지니계수 계산\n    gini_score = eval_gini(y_valid, preds)\n    print(f'지니계수: {gini_score}\\n')\n    \n    return gini_score","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:41:30.319096Z","iopub.execute_input":"2024-06-23T03:41:30.319539Z","iopub.status.idle":"2024-06-23T03:41:30.332077Z","shell.execute_reply.started":"2024-06-23T03:41:30.319504Z","shell.execute_reply":"2024-06-23T03:41:30.330405Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"### 최적화 수행\nfrom bayes_opt import BayesianOptimization\n\n# 베이지안 최적화 객체 생성\noptimizer = BayesianOptimization(f=eval_function, pbounds=param_bounds, random_state=0)\n\n# 베이지안 최적화 수행\noptimizer.maximize(init_points=3, n_iter=6)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T03:49:55.143125Z","iopub.execute_input":"2024-06-23T03:49:55.143567Z","iopub.status.idle":"2024-06-23T04:08:03.984563Z","shell.execute_reply.started":"2024-06-23T03:49:55.143529Z","shell.execute_reply":"2024-06-23T04:08:03.983336Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"|   iter    |  target   | colsam... |   gamma   | max_depth | min_ch... | reg_alpha | reg_la... | scale_... | subsample |\n-------------------------------------------------------------------------------------------------------------------------\n하이퍼파라미터 : {'max_depth': 6, 'subsample': 0.867531900234624, 'colsample_bytree': 0.8646440511781974, 'min_child_weight': 6.0897663659937935, 'gamma': 10.14556809911726, 'reg_alpha': 7.84730959867781, 'reg_lambda': 1.3583576452266626, 'scale_pos_weight': 1.4875174422525386, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.27730614929447445\n\n| \u001b[0m1        \u001b[0m | \u001b[0m0.2773   \u001b[0m | \u001b[0m0.8646   \u001b[0m | \u001b[0m10.15    \u001b[0m | \u001b[0m6.411    \u001b[0m | \u001b[0m6.09     \u001b[0m | \u001b[0m7.847    \u001b[0m | \u001b[0m1.358    \u001b[0m | \u001b[0m1.488    \u001b[0m | \u001b[0m0.8675   \u001b[0m |\n하이퍼파라미터 : {'max_depth': 7, 'subsample': 0.6261387899104622, 'colsample_bytree': 0.9890988281503088, 'min_child_weight': 6.0577898395058085, 'gamma': 9.150324556477333, 'reg_alpha': 8.136089122187865, 'reg_lambda': 1.4702386553170643, 'scale_pos_weight': 1.4142072116395774, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n지니계수: 0.27931478781574615\n\n| \u001b[95m2        \u001b[0m | \u001b[95m0.2793   \u001b[0m | \u001b[95m0.9891   \u001b[0m | \u001b[95m9.15     \u001b[0m | \u001b[95m7.167    \u001b[0m | \u001b[95m6.058    \u001b[0m | \u001b[95m8.136    \u001b[0m | \u001b[95m1.47     \u001b[0m | \u001b[95m1.414    \u001b[0m | \u001b[95m0.6261   \u001b[0m |\n하이퍼파라미터 : {'max_depth': 7, 'subsample': 0.8341587528859367, 'colsample_bytree': 0.7060655192320977, 'min_child_weight': 6.7400242964936385, 'gamma': 10.497859536643814, 'reg_alpha': 8.957236684465528, 'reg_lambda': 1.4196634256866894, 'scale_pos_weight': 1.4922958724505864, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n지니계수: 0.27710164863503317\n\n| \u001b[0m3        \u001b[0m | \u001b[0m0.2771   \u001b[0m | \u001b[0m0.7061   \u001b[0m | \u001b[0m10.5     \u001b[0m | \u001b[0m7.113    \u001b[0m | \u001b[0m6.74     \u001b[0m | \u001b[0m8.957    \u001b[0m | \u001b[0m1.42     \u001b[0m | \u001b[0m1.492    \u001b[0m | \u001b[0m0.8342   \u001b[0m |\n하이퍼파라미터 : {'max_depth': 7, 'subsample': 0.7001630536555632, 'colsample_bytree': 0.8843124587484356, 'min_child_weight': 6.494091293383359, 'gamma': 10.452246227672624, 'reg_alpha': 8.551838810159788, 'reg_lambda': 1.3814765995549108, 'scale_pos_weight': 1.423280772455086, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.27712980821490324\n\n| \u001b[0m4        \u001b[0m | \u001b[0m0.2771   \u001b[0m | \u001b[0m0.8843   \u001b[0m | \u001b[0m10.45    \u001b[0m | \u001b[0m6.838    \u001b[0m | \u001b[0m6.494    \u001b[0m | \u001b[0m8.552    \u001b[0m | \u001b[0m1.381    \u001b[0m | \u001b[0m1.423    \u001b[0m | \u001b[0m0.7002   \u001b[0m |\n하이퍼파라미터 : {'max_depth': 7, 'subsample': 0.6, 'colsample_bytree': 1.0, 'min_child_weight': 5.918891880762839, 'gamma': 8.446181451396447, 'reg_alpha': 8.070600683418562, 'reg_lambda': 1.5, 'scale_pos_weight': 1.4, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.2811712902036131\n\n| \u001b[95m5        \u001b[0m | \u001b[95m0.2812   \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m8.446    \u001b[0m | \u001b[95m7.447    \u001b[0m | \u001b[95m5.919    \u001b[0m | \u001b[95m8.071    \u001b[0m | \u001b[95m1.5      \u001b[0m | \u001b[95m1.4      \u001b[0m | \u001b[95m0.6      \u001b[0m |\n하이퍼파라미터 : {'max_depth': 8, 'subsample': 0.6, 'colsample_bytree': 1.0, 'min_child_weight': 5.0, 'gamma': 8.0, 'reg_alpha': 7.282310746489866, 'reg_lambda': 1.5, 'scale_pos_weight': 1.4, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.282664815445211\n\n| \u001b[95m6        \u001b[0m | \u001b[95m0.2827   \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m8.0      \u001b[0m | \u001b[95m8.0      \u001b[0m | \u001b[95m5.0      \u001b[0m | \u001b[95m7.282    \u001b[0m | \u001b[95m1.5      \u001b[0m | \u001b[95m1.4      \u001b[0m | \u001b[95m0.6      \u001b[0m |\n하이퍼파라미터 : {'max_depth': 8, 'subsample': 0.6, 'colsample_bytree': 1.0, 'min_child_weight': 5.0, 'gamma': 8.0, 'reg_alpha': 9.0, 'reg_lambda': 1.1, 'scale_pos_weight': 1.6, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.282464261332288\n\n| \u001b[0m7        \u001b[0m | \u001b[0m0.2825   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m8.0      \u001b[0m | \u001b[0m8.0      \u001b[0m | \u001b[0m5.0      \u001b[0m | \u001b[0m9.0      \u001b[0m | \u001b[0m1.1      \u001b[0m | \u001b[0m1.6      \u001b[0m | \u001b[0m0.6      \u001b[0m |\n하이퍼파라미터 : {'max_depth': 4, 'subsample': 0.6, 'colsample_bytree': 1.0, 'min_child_weight': 5.0, 'gamma': 8.0, 'reg_alpha': 9.0, 'reg_lambda': 1.5, 'scale_pos_weight': 1.4, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.2801737480044163\n\n| \u001b[0m8        \u001b[0m | \u001b[0m0.2802   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m8.0      \u001b[0m | \u001b[0m4.0      \u001b[0m | \u001b[0m5.0      \u001b[0m | \u001b[0m9.0      \u001b[0m | \u001b[0m1.5      \u001b[0m | \u001b[0m1.4      \u001b[0m | \u001b[0m0.6      \u001b[0m |\n하이퍼파라미터 : {'max_depth': 8, 'subsample': 0.6, 'colsample_bytree': 0.7, 'min_child_weight': 7.0, 'gamma': 8.0, 'reg_alpha': 7.0, 'reg_lambda': 1.1, 'scale_pos_weight': 1.6, 'objective': 'binary:logistic', 'learning_rate': 0.02, 'random_state': 1991}\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"지니계수: 0.2820082572913479\n\n| \u001b[0m9        \u001b[0m | \u001b[0m0.282    \u001b[0m | \u001b[0m0.7      \u001b[0m | \u001b[0m8.0      \u001b[0m | \u001b[0m8.0      \u001b[0m | \u001b[0m7.0      \u001b[0m | \u001b[0m7.0      \u001b[0m | \u001b[0m1.1      \u001b[0m | \u001b[0m1.6      \u001b[0m | \u001b[0m0.6      \u001b[0m |\n=========================================================================================================================\n","output_type":"stream"}]},{"cell_type":"code","source":"# 평가함수 점수가 최대일 때 하이퍼파라미터\nmax_params = optimizer.max['params']\nmax_params","metadata":{"execution":{"iopub.status.busy":"2024-06-23T04:08:03.986750Z","iopub.execute_input":"2024-06-23T04:08:03.987232Z","iopub.status.idle":"2024-06-23T04:08:03.995762Z","shell.execute_reply.started":"2024-06-23T04:08:03.987192Z","shell.execute_reply":"2024-06-23T04:08:03.994427Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"{'colsample_bytree': 1.0,\n 'gamma': 8.0,\n 'max_depth': 8.0,\n 'min_child_weight': 5.0,\n 'reg_alpha': 7.282310746489866,\n 'reg_lambda': 1.5,\n 'scale_pos_weight': 1.4,\n 'subsample': 0.6}"},"metadata":{}}]},{"cell_type":"code","source":"# 정수형 하이퍼파라미터 변환\nmax_params['max_depth'] = int(round(max_params['max_depth']))\n\n# 값이 고정된 하이퍼파라미터 추가\nmax_params.update(fixed_params)\nmax_params","metadata":{"execution":{"iopub.status.busy":"2024-06-23T04:08:03.997418Z","iopub.execute_input":"2024-06-23T04:08:03.997905Z","iopub.status.idle":"2024-06-23T04:08:04.016747Z","shell.execute_reply.started":"2024-06-23T04:08:03.997790Z","shell.execute_reply":"2024-06-23T04:08:04.015542Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"{'colsample_bytree': 1.0,\n 'gamma': 8.0,\n 'max_depth': 8,\n 'min_child_weight': 5.0,\n 'reg_alpha': 7.282310746489866,\n 'reg_lambda': 1.5,\n 'scale_pos_weight': 1.4,\n 'subsample': 0.6,\n 'objective': 'binary:logistic',\n 'learning_rate': 0.02,\n 'random_state': 1991}"},"metadata":{}}]},{"cell_type":"code","source":"### 모델 훈련 및 성능 검증\nfrom sklearn.model_selection import StratifiedKFold\n\n# 층화 K 폴드 교차 검증기 생성\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=1991)\n\n# OOF 방식으로 훈련된 모델로 검증 데이터 타깃값을 예측한 확률을 담을 1차원 배열\noof_val_preds = np.zeros(X.shape[0])\n# OOF 방식으로 훈련된 모델로 테스트 데이터 타깃값을 예측한 확률을 담을 1차원 배열\noof_test_preds = np.zeros(X_test.shape[0])\n\n# OOF 방식으로 모델 훈련, 검증, 예측\nfor idx, (train_idx, valid_idx) in enumerate(folds.split(X, y)):\n    # 각 폴드를 구분하는 문구 출력\n    print('#'*40, f'폴드 {idx+1} / 폴드 {folds.n_splits}', '#'*40)\n    \n    # 훈련용 데이터, 검증용 데이터 설정\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_valid, y_valid = X[valid_idx], y[valid_idx]\n    \n    # XGBoost 전용 데이터셋 생성\n    dtrain = xgb.DMatrix(X_train, y_train)\n    dvalid = xgb.DMatrix(X_valid, y_valid)\n    dtest = xgb.DMatrix(X_test)\n    # XGBoost 모델 훈련\n    xgb_model = xgb.train(\n        params=max_params,\n        dtrain=dtrain,\n        num_boost_round=2000,\n        evals=[(dvalid, 'valid')],\n        maximize=True,\n        feval=gini,\n        early_stopping_rounds=200,\n        verbose_eval=100\n    )\n    \n    # 모델 성능이 가장 좋을 때의 부스팅 반복 횟수 저장\n    best_iter = xgb_model.best_iteration\n    # 테스트 데이터를 활용해 OOF 예측\n    oof_test_preds += xgb_model.predict(dtest, iteration_range=(0, best_iter))/folds.n_splits\n    \n    # 모델 성능 평가를 위한 검증 데이터 타깃값 예측\n    oof_val_preds[valid_idx] += xgb_model.predict(dvalid, iteration_range=(0, best_iter))\n    \n    # 검증 데이터 예측 확률에 대한 정규화 지니 계수\n    gini_score = eval_gini(y_valid, oof_val_preds[valid_idx])\n    print(f'폴드 {idx+1} 지니계수: {gini_score}\\n')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T04:08:04.019197Z","iopub.execute_input":"2024-06-23T04:08:04.019605Z","iopub.status.idle":"2024-06-23T04:19:07.574982Z","shell.execute_reply.started":"2024-06-23T04:08:04.019572Z","shell.execute_reply":"2024-06-23T04:19:07.573803Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"######################################## 폴드 1 / 폴드 5 ########################################\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/training.py:38: UserWarning: `feval` is deprecated, use `custom_metric` instead.  They have different behavior when custom objective is also used.See https://xgboost.readthedocs.io/en/latest/tutorials/custom_metric_obj.html for details on the `custom_metric`.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalid-logloss:0.21709\tvalid-gini:0.19612\n[100]\tvalid-logloss:0.15965\tvalid-gini:0.27424\n[200]\tvalid-logloss:0.15457\tvalid-gini:0.28644\n[300]\tvalid-logloss:0.15386\tvalid-gini:0.29203\n[400]\tvalid-logloss:0.15375\tvalid-gini:0.29347\n[500]\tvalid-logloss:0.15371\tvalid-gini:0.29444\n[600]\tvalid-logloss:0.15368\tvalid-gini:0.29484\n[700]\tvalid-logloss:0.15367\tvalid-gini:0.29509\n[800]\tvalid-logloss:0.15366\tvalid-gini:0.29537\n[900]\tvalid-logloss:0.15367\tvalid-gini:0.29567\n[1000]\tvalid-logloss:0.15364\tvalid-gini:0.29586\n[1100]\tvalid-logloss:0.15363\tvalid-gini:0.29595\n[1200]\tvalid-logloss:0.15365\tvalid-gini:0.29593\n[1300]\tvalid-logloss:0.15364\tvalid-gini:0.29597\n[1400]\tvalid-logloss:0.15363\tvalid-gini:0.29593\n[1447]\tvalid-logloss:0.15363\tvalid-gini:0.29598\n폴드 1 지니계수: 0.29598337519571216\n\n######################################## 폴드 2 / 폴드 5 ########################################\n[0]\tvalid-logloss:0.21709\tvalid-gini:0.18863\n[100]\tvalid-logloss:0.15987\tvalid-gini:0.26136\n[200]\tvalid-logloss:0.15492\tvalid-gini:0.27289\n[300]\tvalid-logloss:0.15428\tvalid-gini:0.27712\n[400]\tvalid-logloss:0.15417\tvalid-gini:0.27852\n[500]\tvalid-logloss:0.15414\tvalid-gini:0.27918\n[600]\tvalid-logloss:0.15412\tvalid-gini:0.27974\n[700]\tvalid-logloss:0.15411\tvalid-gini:0.28000\n[800]\tvalid-logloss:0.15410\tvalid-gini:0.28035\n[900]\tvalid-logloss:0.15411\tvalid-gini:0.28057\n[1000]\tvalid-logloss:0.15409\tvalid-gini:0.28055\n[1100]\tvalid-logloss:0.15406\tvalid-gini:0.28071\n[1200]\tvalid-logloss:0.15406\tvalid-gini:0.28086\n[1300]\tvalid-logloss:0.15408\tvalid-gini:0.28109\n[1400]\tvalid-logloss:0.15407\tvalid-gini:0.28112\n[1500]\tvalid-logloss:0.15408\tvalid-gini:0.28113\n[1600]\tvalid-logloss:0.15407\tvalid-gini:0.28123\n[1700]\tvalid-logloss:0.15408\tvalid-gini:0.28131\n[1800]\tvalid-logloss:0.15406\tvalid-gini:0.28135\n[1900]\tvalid-logloss:0.15406\tvalid-gini:0.28145\n[1999]\tvalid-logloss:0.15406\tvalid-gini:0.28145\n폴드 2 지니계수: 0.2814492533037771\n\n######################################## 폴드 3 / 폴드 5 ########################################\n[0]\tvalid-logloss:0.21709\tvalid-gini:0.20086\n[100]\tvalid-logloss:0.15966\tvalid-gini:0.26838\n[200]\tvalid-logloss:0.15458\tvalid-gini:0.28035\n[300]\tvalid-logloss:0.15392\tvalid-gini:0.28324\n[400]\tvalid-logloss:0.15383\tvalid-gini:0.28399\n[500]\tvalid-logloss:0.15380\tvalid-gini:0.28436\n[600]\tvalid-logloss:0.15378\tvalid-gini:0.28450\n[700]\tvalid-logloss:0.15377\tvalid-gini:0.28455\n[800]\tvalid-logloss:0.15379\tvalid-gini:0.28460\n[814]\tvalid-logloss:0.15380\tvalid-gini:0.28458\n폴드 3 지니계수: 0.2845942362938736\n\n######################################## 폴드 4 / 폴드 5 ########################################\n[0]\tvalid-logloss:0.21709\tvalid-gini:0.19001\n[100]\tvalid-logloss:0.15976\tvalid-gini:0.25959\n[200]\tvalid-logloss:0.15480\tvalid-gini:0.27153\n[300]\tvalid-logloss:0.15416\tvalid-gini:0.27488\n[400]\tvalid-logloss:0.15408\tvalid-gini:0.27549\n[500]\tvalid-logloss:0.15406\tvalid-gini:0.27567\n[600]\tvalid-logloss:0.15404\tvalid-gini:0.27595\n[700]\tvalid-logloss:0.15404\tvalid-gini:0.27631\n[800]\tvalid-logloss:0.15404\tvalid-gini:0.27663\n[900]\tvalid-logloss:0.15403\tvalid-gini:0.27692\n[1000]\tvalid-logloss:0.15401\tvalid-gini:0.27701\n[1100]\tvalid-logloss:0.15401\tvalid-gini:0.27728\n[1200]\tvalid-logloss:0.15401\tvalid-gini:0.27726\n[1300]\tvalid-logloss:0.15400\tvalid-gini:0.27734\n[1400]\tvalid-logloss:0.15399\tvalid-gini:0.27740\n[1500]\tvalid-logloss:0.15399\tvalid-gini:0.27743\n[1600]\tvalid-logloss:0.15400\tvalid-gini:0.27753\n[1700]\tvalid-logloss:0.15400\tvalid-gini:0.27748\n[1800]\tvalid-logloss:0.15401\tvalid-gini:0.27751\n[1821]\tvalid-logloss:0.15400\tvalid-gini:0.27752\n폴드 4 지니계수: 0.27754185490587036\n\n######################################## 폴드 5 / 폴드 5 ########################################\n[0]\tvalid-logloss:0.21709\tvalid-gini:0.19260\n[100]\tvalid-logloss:0.15985\tvalid-gini:0.26937\n[200]\tvalid-logloss:0.15484\tvalid-gini:0.28157\n[300]\tvalid-logloss:0.15419\tvalid-gini:0.28619\n[400]\tvalid-logloss:0.15407\tvalid-gini:0.28814\n[500]\tvalid-logloss:0.15401\tvalid-gini:0.28889\n[600]\tvalid-logloss:0.15400\tvalid-gini:0.28934\n[700]\tvalid-logloss:0.15399\tvalid-gini:0.28947\n[800]\tvalid-logloss:0.15398\tvalid-gini:0.28970\n[900]\tvalid-logloss:0.15397\tvalid-gini:0.28980\n[1000]\tvalid-logloss:0.15398\tvalid-gini:0.29004\n[1100]\tvalid-logloss:0.15398\tvalid-gini:0.29019\n[1200]\tvalid-logloss:0.15397\tvalid-gini:0.29016\n[1300]\tvalid-logloss:0.15395\tvalid-gini:0.29039\n[1400]\tvalid-logloss:0.15396\tvalid-gini:0.29078\n[1500]\tvalid-logloss:0.15394\tvalid-gini:0.29091\n[1600]\tvalid-logloss:0.15395\tvalid-gini:0.29098\n[1700]\tvalid-logloss:0.15394\tvalid-gini:0.29099\n[1800]\tvalid-logloss:0.15394\tvalid-gini:0.29104\n[1900]\tvalid-logloss:0.15393\tvalid-gini:0.29113\n[1999]\tvalid-logloss:0.15393\tvalid-gini:0.29120\n폴드 5 지니계수: 0.29120999302070394\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print('OOF 검증 데이터 지니계수:', eval_gini(y, oof_val_preds))","metadata":{"execution":{"iopub.status.busy":"2024-06-23T04:19:07.576222Z","iopub.execute_input":"2024-06-23T04:19:07.576614Z","iopub.status.idle":"2024-06-23T04:19:07.690387Z","shell.execute_reply.started":"2024-06-23T04:19:07.576581Z","shell.execute_reply":"2024-06-23T04:19:07.689128Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"OOF 검증 데이터 지니계수: 0.2860374810364205\n","output_type":"stream"}]},{"cell_type":"code","source":"### 예측 및 결과 제출\nsubmission['target'] = oof_test_preds\nsubmission.to_csv('submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T04:19:08.539438Z","iopub.execute_input":"2024-06-23T04:19:08.539811Z","iopub.status.idle":"2024-06-23T04:19:11.449561Z","shell.execute_reply.started":"2024-06-23T04:19:08.539782Z","shell.execute_reply":"2024-06-23T04:19:11.448315Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}